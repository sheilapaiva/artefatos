# -*- coding: utf-8 -*-
"""xg_boost.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S0MHIbO9dtXzCBScWysnZLyn31x5x7vu
"""

#!pip install xgboost

#!pip install skforecast

import pandas as pd
import numpy as np
import math
import time
from datetime import datetime
from sklearn.ensemble import RandomForestRegressor
from skforecast.ForecasterAutoregCustom import ForecasterAutoregCustom
import xgboost as xgb

def create_predictors(y):

    lags = y[-1:-8:-1]
    mean = np.mean(y[-20:])
    predictors = np.hstack([lags, mean])
    
    return predictors

def prediction_xgboost(df, metrics):
  #separates 80% of this data
  training_data_len = math.floor(len(df)*.8)  

  #creating a training dataset
  train = pd.DataFrame(df[0:training_data_len]['timestamp'])
  train[metrics] = df[0:training_data_len][metrics]
  train.set_index('timestamp',inplace = True)

  #creating the test base
  test = pd.DataFrame(df[training_data_len+1:]['timestamp'])
  test[metrics] = df[training_data_len+1:][metrics]
  test.set_index('timestamp',inplace = True)

  forecaster = ForecasterAutoregCustom(
    regressor = xgb.XGBRegressor(objective='reg:squarederror', max_depth=10, n_estimators=100, learning_rate=0.3, colsample_bytree=1, subsample=1),
    fun_predictors = create_predictors,
    window_size = 120 
  )

  forecaster.fit(y = train[metrics])

  horizon = test.shape[0]
  predictions = forecaster.predict(steps=horizon)
  predictions.index = test.index
  predictions = pd.DataFrame(predictions)
  predictions.columns = [metrics]

  return predictions[metrics], test[metrics]